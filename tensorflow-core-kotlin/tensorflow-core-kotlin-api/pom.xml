<!--
  Copyright 2020 The TensorFlow Authors. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  =======================================================================
  -->
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.tensorflow</groupId>
    <artifactId>tensorflow-core-kotlin</artifactId>
    <version>0.3.0-SNAPSHOT</version>
  </parent>
  <artifactId>tensorflow-core-kotlin-api</artifactId>
  <packaging>jar</packaging>

  <name>TensorFlow Core Kotlin API Library</name>
  <description>Platform-dependent native code and pure-Java code for the TensorFlow machine intelligence library.</description>

  <properties>
    <!-- Match version used by TensorFlow, in tensorflow/workspace.bzl -->
    <protobuf.version>3.8.0</protobuf.version>
    <javacpp.platform.extension></javacpp.platform.extension>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.tensorflow</groupId>
      <artifactId>tensorflow-core-api</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jmh</groupId>
      <artifactId>jmh-generator-annprocess</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Include native binaries dependencies only for testing -->
    <dependency>
      <groupId>org.tensorflow</groupId>
      <artifactId>tensorflow-core-platform${javacpp.platform.extension}</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <!--
    Deploying Profile
      When deploying, native libraries are not rebuilt but fetched from the Maven repository
      where the external builders have uploaded them. All artifacts are then bundled together to be
      deploy at once using the `deploy:deploy-file` or `gpg:sign-and-deploy-file` goal (this is
      done by the `deploy.sh` script).
      This is also important for snapshots since all artifacts must have the same timestamp to avoid
      issues when using Gradle. So the default deploy goal is skipped.
    -->
    <profile>
      <id>deploying</id>
      <properties>
        <native.build.skip>true</native.build.skip>
        <maven.deploy.skip>true</maven.deploy.skip>
      </properties>
    </profile>
  </profiles>

  <build>
    <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
    <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <!--
          Add generated classes to the source path
            These are classes generated by the annotation processor.
          -->
          <execution>
            <id>add-gen-sources</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.basedir}/src/gen/annotations</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${kotlin.version}</version>
        <configuration>
          <args>
            <arg>-Xopt-in=kotlin.contracts.ExperimentalContracts</arg>
            <arg>-Xexplicit-api=strict</arg>
          </args>
          <jvmTarget>${kotlin.jvmTarget}</jvmTarget>
        </configuration>

        <executions>
          <execution>
            <id>kapt</id>
            <goals>
              <goal>kapt</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
                <sourceDir>${project.basedir}/../../tensorflow-core/tensorflow-core-api/src/gen/java</sourceDir>
                <sourceDir>${project.basedir}/../../tensorflow-core/tensorflow-core-api/src/gen/annotations</sourceDir>
                <sourceDir>${project.basedir}/../../tensorflow-core/tensorflow-core-api/src/main/java</sourceDir>
              </sourceDirs>
              <annotationProcessors>
                <annotationProcessor>org.tensorflow.processor.operator.KotlinOpsProcessor</annotationProcessor>
              </annotationProcessors>
              <annotationProcessorPaths>
                <!-- Specify your annotation processors here. -->
                <annotationProcessorPath>
                  <groupId>org.tensorflow</groupId>
                  <artifactId>tensorflow-core-kotlin-generator</artifactId>
                  <version>${project.version}</version>
                </annotationProcessorPath>
              </annotationProcessorPaths>
            </configuration>
          </execution>
          <execution>
            <id>compile</id>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>

          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version>
        <executions>
          <!--<execution>
            <id>ktlint-format-generated</id>
            <phase>process-sources</phase>
            <configuration>
              <target name="ktlint">
                <java taskname="ktlint" dir="${basedir}" fork="false" failonerror="true"
                  classpathref="maven.plugin.classpath" classname="com.pinterest.ktlint.Main">
                  <arg value="-F"/>
                  <arg value="src/gen/**/*.kt"/>
                </java>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>-->
          <execution>
            <id>ktlint-format</id>
            <configuration>
              <target name="ktlint">
                <java taskname="ktlint" dir="${basedir}" fork="false" failonerror="true"
                  classpathref="maven.plugin.classpath" classname="com.pinterest.ktlint.Main">
                  <arg value="-F"/>
                  <arg value="src/**/*.kt"/>
                  <arg value="--reporter=plain?group_by_file"/>
                </java>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
          <!--<execution>
            <id>ktlint</id>
            <phase>process-sources</phase>
            <configuration>
              <target name="ktlint">
                <java taskname="ktlint" dir="${basedir}" fork="false" failonerror="true"
                  classpathref="maven.plugin.classpath" classname="com.pinterest.ktlint.Main">
                  <arg value="src/**/*.kt"/>
                  <arg value="!src/gen/**/*.kt"/>
                  <arg value="&#45;&#45;reporter=plain?group_by_file"/>
                </java>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>-->
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.pinterest</groupId>
            <artifactId>ktlint</artifactId>
            <version>0.40.0</version>
          </dependency>
          <!-- additional 3rd party ruleset(s) can be specified here -->
        </dependencies>
      </plugin>
<!--      <plugin>-->
<!--        <groupId>org.apache.maven.plugins</groupId>-->
<!--        <artifactId>maven-compiler-plugin</artifactId>-->
<!--        <version>3.5.1</version>-->
<!--        <configuration>-->
<!--          <proc>none</proc>-->
<!--          <source>1.6</source>-->
<!--          <target>1.6</target>-->
<!--        </configuration>-->
<!--        <executions>-->
<!--          &lt;!&ndash; Replacing default-compile as it is treated specially by maven &ndash;&gt;-->
<!--          <execution>-->
<!--            <id>default-compile</id>-->
<!--            <phase>none</phase>-->
<!--          </execution>-->
<!--          &lt;!&ndash; Replacing default-testCompile as it is treated specially by maven &ndash;&gt;-->
<!--          <execution>-->
<!--            <id>default-testCompile</id>-->
<!--            <phase>none</phase>-->
<!--          </execution>-->
<!--          <execution>-->
<!--            <id>java-compile</id>-->
<!--            <phase>compile</phase>-->
<!--            <goals>-->
<!--              <goal>compile</goal>-->
<!--            </goals>-->
<!--          </execution>-->
<!--          <execution>-->
<!--            <id>java-test-compile</id>-->
<!--            <phase>test-compile</phase>-->
<!--            <goals>-->
<!--              <goal>testCompile</goal>-->
<!--            </goals>-->
<!--          </execution>-->
<!--        </executions>-->
<!--      </plugin>-->
      <!--      <plugin>-->
      <!--        <groupId>org.bytedeco</groupId>-->
      <!--        <artifactId>javacpp</artifactId>-->
      <!--        <version>${javacpp.version}</version>-->
      <!--        <configuration>-->
      <!--          <properties>${javacpp.platform.properties}</properties>-->
      <!--          <propertyKeysAndValues>-->
      <!--            <property>-->
      <!--              <name>platform.root</name>-->
      <!--              <value>${javacpp.platform.root}</value>-->
      <!--            </property>-->
      <!--            <property>-->
      <!--              <name>platform.compiler</name>-->
      <!--              <value>${javacpp.platform.compiler}</value>-->
      <!--            </property>-->
      <!--            <property>-->
      <!--              <name>platform.extension</name>-->
      <!--              <value>${javacpp.platform.extension}</value>-->
      <!--            </property>-->
      <!--          </propertyKeysAndValues>-->
      <!--          <classPath>${project.build.outputDirectory}</classPath>-->
      <!--          <includePaths>-->
      <!--            <includePath>${project.basedir}/</includePath>-->
      <!--            <includePath>${project.basedir}/bazel-${project.artifactId}/external/org_tensorflow/</includePath>-->
      <!--          </includePaths>-->
      <!--          <linkPaths>-->
      <!--            <linkPath>${project.basedir}/bazel-bin/external/org_tensorflow/tensorflow/</linkPath>-->
      <!--          </linkPaths>-->
      <!--          <resourcePaths>-->
      <!--            <resourcePath>${project.basedir}/../../</resourcePath>-->
      <!--            <resourcePath>${project.basedir}/bazel-bin/external/org_tensorflow/tensorflow/tools/lib_package/</resourcePath>-->
      <!--          </resourcePaths>-->
      <!--          <preloadPaths>-->
      <!--            <preloadPath>${project.basedir}/bazel-${project.artifactId}/external/mkl_linux/lib/</preloadPath>-->
      <!--            <preloadPath>${project.basedir}/bazel-${project.artifactId}/external/mkl_darwin/lib/</preloadPath>-->
      <!--            <preloadPath>${project.basedir}/bazel-${project.artifactId}/external/mkl_windows/lib/</preloadPath>-->
      <!--          </preloadPaths>-->
      <!--        </configuration>-->
      <!--        <executions>-->
      <!--          <execution>-->
      <!--            &lt;!&ndash;-->
      <!--            Validates the configuration of this plugin-->
      <!--            &ndash;&gt;-->
      <!--            <id>javacpp-validate</id>-->
      <!--            <phase>validate</phase>-->
      <!--            <goals>-->
      <!--              <goal>build</goal>-->
      <!--            </goals>-->
      <!--          </execution>-->
      <!--          <execution>-->
      <!--            &lt;!&ndash;-->
      <!--            Build TensorFlow core libraries-->
      <!--              This launch a script (build.sh) that will execute Bazel for uploading archives and-->
      <!--              executing the build, which may take many hours on a normal desktop. Libraries are then-->
      <!--              cached so only the first execution will actually trigger a full build.-->
      <!--              This task also trigger the generation of the operation wrappers issued from the code-->
      <!--              found in /src/bazel/op_generator.-->
      <!--            &ndash;&gt;-->
      <!--            <id>javacpp-build</id>-->
      <!--            <phase>initialize</phase>-->
      <!--            <goals>-->
      <!--              <goal>build</goal>-->
      <!--            </goals>-->
      <!--            <configuration>-->
      <!--              <skip>${javacpp.build.skip}</skip>-->
      <!--              <buildCommand>-->
      <!--                <program>bash</program>-->
      <!--                <argument>${project.basedir}/build.sh</argument>-->
      <!--              </buildCommand>-->
      <!--              <environmentVariables>-->
      <!--                <EXTENSION>${javacpp.platform.extension}</EXTENSION>-->
      <!--              </environmentVariables>-->
      <!--              <workingDirectory>${project.basedir}</workingDirectory>-->
      <!--            </configuration>-->
      <!--          </execution>-->
      <!--          <execution>-->
      <!--            &lt;!&ndash;-->
      <!--            Clean TensorFlow native libraries-->
      <!--              When this gets executed, all libraries build and cached by Bazel will be deleted and-->
      <!--              will be rebuild on the next execution.-->
      <!--            &ndash;&gt;-->
      <!--            <id>javacpp-clean</id>-->
      <!--            <phase>clean</phase>-->
      <!--            <goals>-->
      <!--              <goal>build</goal>-->
      <!--            </goals>-->
      <!--            <configuration>-->
      <!--              <skip>${javacpp.build.skip}</skip>-->
      <!--              <buildCommand>-->
      <!--                <program>bazel</program>-->
      <!--                <argument>clean</argument>-->
      <!--              </buildCommand>-->
      <!--              <workingDirectory>${project.basedir}</workingDirectory>-->
      <!--            </configuration>-->
      <!--          </execution>-->
      <!--          <execution>-->
      <!--            &lt;!&ndash;-->
      <!--            Generate TensorFlow C API binding sources-->
      <!--              The plugin will parse the pre-compiled TensorFlow C API presets and generate-->
      <!--              source classes for calling this API directly in Java.-->
      <!--            &ndash;&gt;-->
      <!--            <id>javacpp-parser</id>-->
      <!--            <phase>generate-sources</phase>-->
      <!--            <goals>-->
      <!--              <goal>parse</goal>-->
      <!--            </goals>-->
      <!--            <configuration>-->
      <!--              <skip>${javacpp.parser.skip}</skip>-->
      <!--              <outputDirectory>${project.basedir}/src/gen/java</outputDirectory>-->
      <!--              <classOrPackageName>org.tensorflow.internal.c_api.presets.*</classOrPackageName>-->
      <!--            </configuration>-->
      <!--          </execution>-->
      <!--          <execution>-->
      <!--            &lt;!&ndash;-->
      <!--            Compile JNI native code from this project-->
      <!--              This code is used to called the TensorFlow C API right now but should be eventually-->
      <!--              replaced by the usage of JavaCPP generated bindings-->
      <!--            &ndash;&gt;-->
      <!--            <id>javacpp-compiler</id>-->
      <!--            <phase>process-classes</phase>-->
      <!--            <goals>-->
      <!--              <goal>build</goal>-->
      <!--            </goals>-->
      <!--            <configuration>-->
      <!--              <outputDirectory>${project.build.directory}/native/org/tensorflow/internal/c_api/${native.classifier}/</outputDirectory>-->
      <!--              <skip>${javacpp.compiler.skip}</skip>-->
      <!--              <classOrPackageName>org.tensorflow.internal.c_api.**</classOrPackageName>-->
      <!--              <copyLibs>true</copyLibs>-->
      <!--              <copyResources>true</copyResources>-->
      <!--            </configuration>-->
      <!--          </execution>-->
      <!--        </executions>-->
      <!--        <dependencies>-->
      <!--          <dependency>-->
      <!--            <groupId>com.google.protobuf</groupId>-->
      <!--            <artifactId>protobuf-java</artifactId>-->
      <!--            <version>${protobuf.version}</version>-->
      <!--          </dependency>-->
      <!--        </dependencies>-->
      <!--      </plugin>-->
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <!--
            Create the native artifact
              This artifact will contain only native libraries compiled by the javacpp-plugin,
              and will be classified under the active platform (OS, arch, extension...)
            -->
            <id>native-jar</id>
            <phase>package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <classifier>${native.classifier}</classifier>
              <skipIfEmpty>true</skipIfEmpty>
              <includes>
                <!-- In case of successive builds for multiple platforms without cleaning, ensures
                     we only include files for this platform. -->
                <include>org/tensorflow/internal/c_api/${native.classifier}/</include>
              </includes>
              <classesDirectory>${project.build.directory}/native</classesDirectory>
              <excludes>
                <exclude>org/tensorflow/internal/c_api/${native.classifier}/*.exp</exclude>
                <exclude>org/tensorflow/internal/c_api/${native.classifier}/*.lib</exclude>
                <exclude>org/tensorflow/internal/c_api/${native.classifier}/*.obj</exclude>
                <exclude>org/tensorflow/internal/c_api/${native.classifier}/*mklml*</exclude>
                <exclude>org/tensorflow/internal/c_api/${native.classifier}/*iomp5*</exclude>
                <exclude>org/tensorflow/internal/c_api/${native.classifier}/*msvcr120*</exclude>
              </excludes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.0</version>
        <executions>
          <execution>
            <!--
            Run the tests after packaging the artifacts
              This is required as most of our unit tests are in fact integration tests that should
              be executed in a TensorFlow runtime environment.
            -->
            <id>default-test</id>
            <phase>integration-test</phase>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!--      <plugin>-->
      <!--        <artifactId>maven-source-plugin</artifactId>-->
      <!--        <version>3.2.1</version>-->
      <!--        <executions>-->
      <!--          <execution>-->
      <!--            <id>attach-sources</id>-->
      <!--            <phase>leave-disabled-to-not-generate-sources-twice-on-release</phase>-->
      <!--          </execution>-->
      <!--          <execution>-->
      <!--            <id>attach-source</id>-->
      <!--            <goals>-->
      <!--              <goal>jar-no-fork</goal>-->
      <!--            </goals>-->
      <!--          </execution>-->
      <!--        </executions>-->
      <!--      </plugin>-->
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <failOnError>false</failOnError>
              <minmemory>256m</minmemory>
              <maxmemory>2048m</maxmemory>
              <links>
                <link>http://bytedeco.org/javacpp/apidocs</link>
              </links>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
